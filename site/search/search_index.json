{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Beranda","text":""},{"location":"#selamat-datang","title":"Selamat Datang","text":""},{"location":"#tutorial-belajar-mysql","title":"Tutorial Belajar MySQL","text":""},{"location":"#edisi-best-practice","title":"Edisi Best Practice","text":""},{"location":"bab1/","title":"Mendefinisikan Data dengan DML","text":"<pre><code>Create - Alter - Drop\n</code></pre>"},{"location":"bab1/#membuat-database","title":"Membuat Database","text":"<p>Langkah pertama yagn harus kita lakukan adalah membuat database. Kali ini kita akan membuat database baru bernama \"buku_db\". <pre><code>CREATE DATABASE buku_db;\n</code></pre> Setelah database tercipta, kita perlu mengaktifkan/ memilih database yang akan kita manipulasi. <pre><code>USE buku_db;\n</code></pre></p>"},{"location":"bab1/#membuat-tabel","title":"Membuat Tabel","text":"<p>Tahap selanjutnya kita perlu membuat beberapa tabel, yaitu: - Tabel kategori - Tabel pengarang - Tabel penerbit - Tabel buku - Tabel link_buku_pengarang - Tabel link_buku_penerbit</p> <p>Berikut query yang perlu kita jalankan.</p>"},{"location":"bab1/#tabel-kategori","title":"Tabel kategori","text":"<pre><code>CREATE TABLE kategori(\nkategori_id int not null auto_increment,\nkategori_nama varchar(25),\nprimary key(kategori_id)\n);\n</code></pre>"},{"location":"bab1/#tabel-pengarang","title":"Tabel pengarang","text":"<pre><code>CREATE TABLE pengarang(\npengarang_id char(3) not null,\npengarang_nama varchar(30),\nprimary key(pengarang_id)\n);\n</code></pre>"},{"location":"bab1/#tabel-penerbit","title":"Tabel penerbit","text":"<pre><code>CREATE TABLE penerbit(\npenerbit_id char(4) not null,\npenerbit_nama varchar(50),\nprimary key(penerbit_id)\n);\n</code></pre>"},{"location":"bab1/#tabel-buku","title":"Tabel buku","text":"<pre><code>CREATE TABLE buku(\nbuku_isbn char(13) not null,\nbuku_judul varchar(75),\npenerbit_id char(4),\nbuku_tglterbit date,\nbuku_jmlhalaman int,\nbuku_deskripsi text,\nbuku_harga decimal,\nprimary key(buku_isbn),\nforeign key(penerbit_id)\n    references penerbit(penerbit_id)\n);\n</code></pre>"},{"location":"bab1/#tabel-link_buku_pengarang","title":"Tabel link_buku_pengarang","text":"<pre><code>CREATE TABLE link_buku_pengarang(\nbuku_isbn char(13) not null,\npengarang_id char(3) not null,\nprimary key(buku_isbn, pengarang_id),\nforeign key(buku_isbn)\n    references buku(buku_isbn),\nforeign key(pengarang_id)\n    references pengarang(pengarang_id)\n);\n</code></pre>"},{"location":"bab1/#tabel-link_buku_kategori","title":"Tabel link_buku_kategori","text":"<pre><code>CREATE TABLE link_buku_kategori(\nbuku_isbn char(13) not null,\nkategori_id int not null,\nprimary key(buku_isbn, kategori_id),\nforeign key(buku_isbn)\n    references buku(buku_isbn),\nforeign key(kategori_id)\n    references kategori(kategori_id)\n);\n</code></pre>"},{"location":"bab1/#query-tambahan","title":"Query Tambahan","text":""},{"location":"bab1/#mengubah-nama-tabel","title":"Mengubah nama tabel","text":"<pre><code>ALTER TABLE\n    kategori\nRENAME TO\n    kategori_buku;\n</code></pre>"},{"location":"bab1/#menambah-kolom","title":"Menambah kolom","text":"<pre><code>ALTER TABLE\n    buku\nADD COLUMN\n    buku_sinopsis text;\n</code></pre>"},{"location":"bab1/#mengubah-kolom","title":"Mengubah Kolom","text":"<pre><code>ALTER TABLE\n    buku\nCHANGE\n    buku_isbn buku_id char(15);\n</code></pre>"},{"location":"bab1/#menghapus-kolom","title":"Menghapus kolom","text":"<pre><code>ALTER TABLE\n    buku\nDROP\n    buku_sinopsis;\n</code></pre>"},{"location":"bab1/#menambah-primary-key","title":"Menambah primary key","text":"<pre><code>ALTER TABLE\n    buku\nADD\n    primary key(buku_judul);\n</code></pre>"},{"location":"bab1/#menambah-foreign-key","title":"Menambah foreign key","text":"<pre><code>ALTER TABLE\n    link_buku_kategori\nADD\n    foreign key(buku_isbn)\n    references buku(buku_isbn);\n</code></pre>"},{"location":"bab1/#menghapus-primary-key","title":"Menghapus primary key","text":"<pre><code>ALTER TABLE\n    buku\nDROP primary key;\n</code></pre>"},{"location":"bab1/#menghapus-foreign-key","title":"Menghapus foreign key","text":"<pre><code>ALTER TABLE\n    fk_link_buku_kategori;\n</code></pre>"},{"location":"bab1/#menambah-indeks","title":"Menambah indeks","text":"<pre><code>ALTER TABLE\n    buku\nADD INDEX\n    idx_judul(buku_judul);\n</code></pre>"},{"location":"bab1/#menghapus-indeks","title":"Menghapus indeks","text":"<pre><code>ALTER TABLE\n    buku\nDROP INDEX\n    idx_judul;\n</code></pre>"},{"location":"bab1/#menghapus-tabel","title":"Menghapus Tabel","text":"<pre><code>DROP TABLE IF EXIST\n    link_buku_kategori;\nDROP TABLE\n    link_buku_kategori,\n    link_buku_pengarang;\n</code></pre>"},{"location":"bab10/","title":"Prosedur dan Fungsi","text":""},{"location":"bab11/","title":"Trigger","text":""},{"location":"bab12/","title":"Ekspor dan Impor","text":""},{"location":"bab2/","title":"Manipulasi Data Dengan DML","text":"<pre><code>INSERT, UPDATE, DELETE\n</code></pre>"},{"location":"bab2/#memasukkan-data-tabel","title":"Memasukkan Data Tabel","text":""},{"location":"bab2/#tabel-kategori","title":"Tabel Kategori","text":"<pre><code>INSERT INTO kategori (kategori_nama) VALUES\n('Database'),\n('Desain Grafis'),\n('Jaringan Komputer'),\n('Pemrograman'),\n('Web dan Internet'),\n('Office Application');\n</code></pre>"},{"location":"bab2/#tabel-pengarang","title":"Tabel Pengarang","text":"<pre><code>INSERT INTO pengarang VALUES\n('P01','Andi Setiawan'),\n('P02','Rudi Wicaksono'),\n('P03','Beni Tito'),\n('P04','Prasetya'),\n('P05','Erik Rusdianto'),\n('P06','Rosdiana'),\n('P07','Fredi Hidayat'),\n('P08','Hasanudin'),\n('P09','Ahmad hanafi'),\n('P10','Iwan Gunardi'),\n('P11','Iman Teguh'),\n('P12','Abdul Ghozali'),\n('P13','Tegar Sanjaya');\n</code></pre>"},{"location":"bab2/#tabel-penerbit","title":"Tabel Penerbit","text":"<pre><code>INSERT INTO penerbit VALUES\n('PB01','Angkasa Raya'),\n('PB02','Cahaya Ilmu Persada'),\n('PB03','Sinar Ilmu Perkasa'),\n('PB04','Intan'),\n('PB05','Sinar Raya'),\n('PB06','Informatika'),\n('PB07','Tiga Sekawan'),\n('PB08','Cipta Ilmu');\n</code></pre>"},{"location":"bab2/#tabel-buku","title":"Tabel Buku","text":"<pre><code>INSERT INTO buku VALUES\n('222-34222-1-0','Belajar Photoshop','PB01','2019/07/02',300,NULL,42000),\n('222-34222-1-1','Panduan CorelDRAW','PB02','2020/03/15',400,NULL,55000),\n('979-96446-9-0','Belajar SQL','PB06','2019/10/12',346,NULL,45000),\n('979-96446-9-1','Panduan Basis Data','PB01','2017/03/02',257,NULL,37000),\n('979-96446-9-2','Perancangan Sistem','PB03','2013/09/20',403,NULL,37000),\n('979-96446-9-3','Microsoft Access','PB06','2015/07/13',400,NULL,48500),\n('888-96771-3-0','Pemrograman Pascal','PB08','2014/11/01',350,NULL,50000),\n('888-96771-3-1','Pemrograman Java','PB06','2017/01/23',450,NULL,72000),\n('888-96771-3-2','Pemrograman C untuk Hardware','PB05','2016/12/25',398,NULL,47000),\n('888-96771-3-3','Panduan C++','PB06','2015/07/15',490,NULL,65000),\n('888-96771-3-4','Belajar Delphi','PB05','2018/08/11',328,NULL,50000),\n('888-96771-3-5','Visual Basic','PB02','2017/10/14',250,NULL,50000),\n('666-96771-2-0','Panduan Membangun Jaringan TCP/IP','PB08','2016/08/02',200,NULL,60000),\n('666-96771-2-1','Implementasi TCP/IP di Linux','PB08','2018/11/21',230,NULL,350000),\n('777-76723-5-0','Belajar PHP 8','PB07','2020/05/02',600,NULL,95000),\n('777-76723-5-1','Aplikasi Web dengan Python','PB07','2014/08/01',180,NULL,30000),\n('777-76723-5-2','Internet Marketing','PB07','2017/01/24',150,NULL,38500),\n('777-76723-5-3','Panduan Menjadi Youtuber','PB07','2017/01/24','243',NULL,38500),\n('999-11555-2-0','Microsoft Power Point','PB06','2018/11/23',300,NULL,57500),\n('999-11555-2-1','Microsoft Word','PB04','2017/12/01',270,NULL,60000);\n</code></pre>"},{"location":"bab2/#tabel-link-buku-pengarang","title":"Tabel Link Buku Pengarang","text":"<pre><code>INSERT INTO link_buku_pengarang VALUES\n('222-34222-1-0','P01'),\n('222-34222-1-1','P04'),\n('666-96771-2-0','P04'),\n('666-96771-2-0','P07'),\n('666-96771-2-0','P06'),\n('666-96771-2-1','P04'),\n('666-96771-2-1','P01'),\n('777-76723-5-0','P02'),\n('777-76723-5-0','P04'),\n('777-76723-5-1','P03'),\n('777-76723-5-1','P12'),\n('777-76723-5-1','P10'),\n('777-76723-5-2','P13'),\n('777-76723-5-3','P08'),\n('777-76723-5-3','P09'),\n('888-96771-3-0','P04'),\n('888-96771-3-1','P02'),\n('888-96771-3-1','P11'),\n('888-96771-3-2','P01'),\n('888-96771-3-2','P06'),\n('888-96771-3-3','P02'),\n('888-96771-3-4','P10'),\n('888-96771-3-4','P09'),\n('888-96771-3-5','P02'),\n('979-96446-9-0','P11'),\n('979-96446-9-0','P02'),\n('979-96446-9-1','P07'),\n('979-96446-9-2','P13'),\n('979-96446-9-2','P10'),\n('979-96446-9-2','P12'),\n('979-96446-9-2','P03'),\n('979-96446-9-3','P11'),\n('999-11555-2-0','P11'),\n('999-11555-2-0','P13'),\n('999-11555-2-1','P08'),\n('999-11555-2-1','P09'),\n('999-11555-2-1','P10'),\n('999-11555-2-1','P06');\n</code></pre>"},{"location":"bab2/#tabel-link-buku-kategori","title":"Tabel Link Buku Kategori","text":"<pre><code>INSERT INTO link_buku_kategori VALUES\n('222-34222-1-0',2),\n('222-34222-1-1',2),\n('979-96446-9-0',1),\n('979-96446-9-1',1),\n('979-96446-9-2',1),\n('979-96446-9-2',4),\n('979-96446-9-3',1),\n('888-96771-3-0',4),\n('888-96771-3-1',4),\n('888-96771-3-2',4),\n('888-96771-3-3',4),\n('888-96771-3-4',4),\n('888-96771-3-5',4),\n('666-96771-2-0',3),\n('666-96771-2-1',3),\n('777-76723-5-0',4),\n('777-76723-5-0',5),\n('777-76723-5-1',4),\n('777-76723-5-1',5),\n('777-76723-5-2',5),\n('777-76723-5-3',5),\n('999-11555-2-0',6),\n('999-11555-2-1',6);\n</code></pre>"},{"location":"bab2/#query-tambahan","title":"Query Tambahan","text":""},{"location":"bab2/#mengubah-data","title":"Mengubah Data","text":"<p>Mengubah Data Tabel Penerbit <pre><code>UPDATE penerbit\n    SET penerbit_nama = 'Informatika Bandung'\nWHERE\n    penerbit_id = 'PB06';\n</code></pre></p> <p>Mengubah Data Tabel Buku <pre><code>UPDATE buku\n    SET buku_judul = 'Tuntunan Praktis Menggunakan Microsoft Word 2010',\n        penerbit_id = 'PB02'\nWHERE\n    buku_isbn = '999-11555-2-1';\n</code></pre></p>"},{"location":"bab2/#menghapus-data","title":"Menghapus Data","text":"<p>Menghapus 1 Baris Data <pre><code>DELETE FROM buku\nWHERE buku_isbn = '888-96771-3-5';\n</code></pre></p> <p>Menghapus Seluruh Baris Data <pre><code>DELETE FROM buku;\n</code></pre></p> <p>Menghapus tabel beserta isinya, lalu mere-build ulang tabel tanpa data <pre><code>TRUNCATE table buku;\n</code></pre></p>"},{"location":"bab3/","title":"Kontrol Hak Akses &amp; Transaksi Data","text":"<pre><code>TCL : Grant, Revoke, Commit, Rollback\n</code></pre> <ul> <li> <p>Memberikan seluruh jenis akses pada 1 database <pre><code>GRANT ALL\non buku_db.*\nTO 'adi'@'localhost'\nIDENTIFIED BY 's3cr3t';\n</code></pre></p> </li> <li> <p>Menampilkan hak akses yang dimiliki oleh satu user <pre><code>SHOW GRANTS FOR 'adi'@'localhost';\n</code></pre></p> </li> <li> <p>Mencabut seluruh jenis akses pada 1 user <pre><code>REVOKE ALL on buku_db.* FROM adi;\n</code></pre></p> </li> <li> <p>Menonaktifkan fungsi COMMIT <pre><code>SET AUTOCOMMIT=0;\n</code></pre></p> </li> <li> <p>Mengaktifkan fungsi COMMIT <pre><code>SET AUTOCOMMIT=1;\n</code></pre></p> </li> <li> <p>Menggunakan ROLLBACK Untuk menggunakan fungsi ROLLBACK, AUTOCOMMIT harus diset OFF terlebih dahulu <pre><code>SET AUTOCOMMIT=0;\n</code></pre> <pre><code>CREATE TABLE test(\nkode integer not null primary key,\nketerangan varchar(50)\n);\n</code></pre></p> </li> </ul> <pre><code>INSERT INTO test VALUES\n(1,'Baris Pertama'),\n(2,'Baris Ke dua'),\n(3,'Baris ke tiga');\n</code></pre> <pre><code>COMMIT;\n</code></pre> <pre><code>INSERT INTO test VALUES\n(4,'Baris ke empat'),\n(5,'Baris ke lima'),\n(6,'Baris ke enam');\n</code></pre> <pre><code>ROLLBACK;\n</code></pre>"},{"location":"bab4/","title":"Seleksi Data - Bagian 1","text":""},{"location":"bab4/#perintah-select","title":"Perintah SELECT","text":"<p>Menampilkan seluruh kolom dan data dalam tabel <pre><code>SELECT * FROM buku;\n</code></pre></p> <p>Menampilkan beberapa kolom dari tabel buku <pre><code>SELECT  buku_isbn,\n        buku_judul,\n        penerbit_id,\n        buku_tglterbit,\n        buku_jmlhalaman,\n        buku_deskripsi,\n        buku_harga\nFROM\n    buku;\n</code></pre></p> <p>Menampilkan beberapa kolom dari tabel buku dan memberi alias <pre><code>SELECT  buku_isbn ISBN,\n        buku_judul JUDUL,\n        penerbit_id PENERBIT,\n        buku_tglterbit TERBIT,\n        buku_jmlhalaman HALAMAN,\n        buku_deskripsi DESKRIPSI,\n        buku_harga HARGA\nFROM\n    buku;\n</code></pre></p> <p>Menampilkan seluruh data dari beberapa kolom <pre><code>SELECT\n    buku_harga,\n    buku_judul\nFROM\n    buku;\n</code></pre></p> <p>Menampilkan seluruh data dari beberapa kolom dan memberi alias <pre><code>SELECT\n    buku_harga HARGA,\n    buku_judul JUDUL\nFROM\n    buku;\n</code></pre></p> <p>Menyertakan nama database dan tabel dalam perintah SELECT <pre><code>SELECT\n    buku.buku_isbn,\n    buku.buku_judul,\n    buku.buku_harga\nFROM\n    buku_db.buku;\n</code></pre></p> <p>Menggunakan Alias tabel <pre><code>SELECT\n    a.buku_isbn,\n    a.buku_judul,\n    a.buku_harga\nFROM\n    buku a;\n</code></pre></p> <p>Menggunakan Alias pada nama kolom <pre><code>SELECT\n    buku_isbn as 'ISBN',\n    buku_judul as 'JUDUL BUKU',\n    buku_harga as 'HARGA'\nFROM\n    buku;\n</code></pre></p>"},{"location":"bab4/#menyaring-data","title":"Menyaring Data","text":"<p>Data yang ditampilkan dapat disaring (filter) berdasarkan kebutuhan informasi yang akan disajikan. Untuk menyaring data, perlu didefinisikan kondisi yang akan dijadikans ebagai kriteria penyaringan. Dalam perintah SELECT ditambah klausa WHERE setelahnya.</p> <p>Contoh 1 Menampilkan data buku yang harganya kurang dari Rp. 45.000 <pre><code>SELECT\n    buku_isbn as 'ISBN',\n    buku_judul as 'JUDUL BUKU',\n    buku_harga as 'HARGA'\nFROM\n    buku\nWHERE\n    buku_harga &lt; 45000;\n</code></pre></p> <p>Menampilkan data buku yang harganya kurang dari Rp. 45.000 dan ISBN diawali oleh angka 777 <pre><code>SELECT\n    buku_isbn as 'ISBN',\n    buku_judul as 'JUDUL BUKU',\n    buku_harga as 'HARGA'\nFROM\n    buku\nWHERE\n    (buku_harga &lt; 45000) AND\n    (buku_isbn LIKE '777%');\n</code></pre></p> <p>Menampilkan data dengan rentang tertentu Menggunakan klausa BETWEEN</p> <p>Contoh BETWEEN 1 <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nWHERE\n    buku_harga\n    BETWEEN 50000 AND 60000;\n</code></pre></p> <p>Contoh BETWEEN 2 <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nWHERE\n    (buku_harga &gt;= 50000) AND\n    (buku_harga &lt;= 60000);\n</code></pre></p>"},{"location":"bab4/#klausa-limit","title":"Klausa LIMIT","text":"<p>LIMIT digunakan untuk membatasi data yang disajikan sesuai batas limit yang ditentukan terurut dari atas.</p> <p>Contoh LIMIT 1 <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nLIMIT 5;\n</code></pre></p> <p>LIMIT juga bisa membatasi data yang dimulai dari baris tertentu. Contoh LIMIT 2 Membatasi 10 data dimulai dari urutan ke-6 <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nLIMIT 5,10;\n</code></pre></p>"},{"location":"bab4/#klausa-distinct","title":"Klausa DISTINCT","text":"<p>Klausa ini berfungsi untuk menghilangkan data yang dobel saat disajikan.</p> <p>Contoh sebelum diberi DISTINCT <pre><code>SELECT penerbit_id FROM buku;\n</code></pre></p> <p>Setelah diberi klausa DISTINCT <pre><code>SELECT DISTINCT penerbit_id FROM buku;\n</code></pre></p>"},{"location":"bab4/#mengurutkan-data","title":"Mengurutkan Data","text":"<p>Secara default data yang disajikan menggunakan printah SELECT akan ditmpilkan sesuai urutan data dimasukkan, kecuali pada kolom yang diatur sebagai primary key, maka dia akan urut sesui bilangan. Untuk mengurutkan data sesuai kolom tertentu kita bisa menggunakan klausa ORDER BY.</p> <p>Contoh Penggunaan ORDER BY Mengurutkan datan sesuai kolom 'buku_judul' <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nORDER BY\n    buku_judul;\n</code></pre></p> <p>Pengurutan data dari terkecil ke terbesar (Ascending) <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nORDER BY\n    buku_judul ASC;\n</code></pre></p> <p>Pengurutan data dari terbesar ke terkecil (Descending) <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nORDER BY\n    buku_judul DESC;\n</code></pre></p>"},{"location":"bab5/","title":"Seleksi Data - Bagian 2","text":""},{"location":"bab5/#pengelompokan-data-menggunakan-group-by","title":"Pengelompokan Data menggunakan GROUP BY","text":"<p>Penggunaan kalusa GROUP BY disertakan dalam perintah SELECT - Contoh 1 <pre><code>SELECT\n    penerbit_id,\n    COUNT(*)\nFROM\n    buku\nGROUP BY\n    penerbit_id;\n</code></pre> Jumlah buku yang ditampilkan dari hasil kode di atas adalah hasil dari proses pengelompokan brdasarkan penerbit (dalam hal ini kolom penerbit_id).</p> <ul> <li> <p>Contoh 2 <pre><code>SELECT\n    a.penerbit_id as 'Kode Penerbit',\n    b.penerbit_nama as 'Nama Penerbit',\n    COUNT(a.penerbit_id) as 'Jumlah Buku'\nFROM\n    buku a,\n    penerbit b\nWHERE\n    a.penerbit_id = b.penerbit_id\nGROUP BY\n    a.penerbit_id,\n    b.penerbit_nama;\n</code></pre> Pada kode di atas ditambahkan kolom penerbit_nama agar lebih jelas.</p> </li> <li> <p>Contoh 3 <pre><code>SELECT\n    a.pengarang_id as 'ID Pengarang',\n    a.pengarang_nama as 'Nama Pengarang',\n    GROUP_CONCAT(b.buku_judul) as 'Daftar Judul Buku'\nFROM\n    pengarang a,\n    buku b,\n    link_buku_pengarang c\nWHERE\n    a.pengarang_id = c.pengarang_id AND\n    b.buku_isbn = c.buku_isbn\nGROUP BY\n    a.pengarang_id,\n    a.pengarang_nama;\n</code></pre> Kode terebut akan menampilkan daftar judul buku yagn dikelompokkan berdasarkan pengarang.</p> </li> </ul> <p>GROUP CONCAT() adalah fungsi agregasi yagn berguna untuk mengelompokkan baris data menjadi satu teks (string) tunggal.</p>"},{"location":"bab5/#menggabungkan-data","title":"Menggabungkan Data","text":"<p>Proses menggabungkan 2 query select menjadi 1 dengan perintah UNION dengan syarat masing-masing query select menghasilkan jumlah row data yang sama.</p> <ul> <li> <p>Query 1 <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nWHERE\n    buku_harga &lt;= 40000;\n</code></pre> Kode di atas akan menghasilkan 6 row data.</p> </li> <li> <p>Query 2 <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nWHERE buku_harga &gt;= 50000;\n</code></pre> Kode tersebut menghasilkan 10 row data.</p> </li> <li> <p>Query 3 : Penggabungan Query menggunakan UNION <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nWHERE\n    buku_harga &lt;= 40000\nUNION\nSELECT\n    buku_isbn,\n    buku_judul,\n    buku_harga\nFROM\n    buku\nWHERE buku_harga &gt;= 50000;\n</code></pre></p> </li> </ul>"},{"location":"bab5/#join-seleksi-data-dari-2-tabel-atau-lebih","title":"Join : Seleksi Data dari 2 Tabel atau Lebih","text":"<p>Seleksi data dari 2 tabel atau lebih, lebih rumit dibandingkan seleksi data dari 1 tabel. Syarat utamanya adalah adanya kolom relasi. Kolom relasi adalah kolom yang digunakan sebagai kunci untuk menghubungkan antara tabel yang satu dengan tabel yang lain.</p> <ul> <li> <p>Contoh 1 Seleksi data dari 2 tabel (sederhana) <pre><code>SELECT\n    a.buku_isbn,\n    a.buku_judul,\n    b.penerbit_nama\nFROM\n    buku a,\n    penerbit b\nWHERE\n    a.penerbit_id = b.penerbit_id;\n</code></pre> Tampilkan data dari kolom buku_isbn dan buku_judul pada tabel buku dengan nama alias a, serta kolom penerbit nama pada tabel penerbit dengan nama alias b yang nilai penerbit_id nya sama.</p> </li> <li> <p>Contoh 2 Seleksi data yang melibatkan 4 tabel <pre><code>SELECT\n    a.buku_isbn,\n    a.buku_judul,\n    b.penerbit_nama,\n    GROUP_CONCAT(d.pengarang_nama)\nFROM\n    buku a,\n    penerbit b,\n    link_buku_pengarang c,\n    pengarang d\nWHERE\n    a.penerbit_id = b.penerbit_id AND\n    a.buku_isbn = c.buku_isbn AND\n    c.pengarang_id = d.pengarang_id\nGROUP BY\n    a.buku_isbn,\n    a.buku_judul,\n    b.penerbit_nama;\n</code></pre></p> </li> <li>Contoh 3 Seleksi data Tambahan <pre><code>SELECT\n    a.buku_isbn,\n    a.buku_judul,\n    b.penerbit_nama,\n    GROUP_CONCAT(d.kategori_nama)\nFROM\n    buku a,\n    penerbit b,\n    link_buku_kategori c,\n    kategori d\nWHERE\n    a.penerbit_id = b.penerbit_id AND\n    a.buku_isbn = c.buku_isbn AND\n    c.kategori_id = d.kategori_id\nGROUP BY\n    a.buku_isbn,\n    a.buku_judul,\n    b.penerbit_nama;\n</code></pre></li> </ul>"},{"location":"bab5/#pengurangan-dan-interseksi-data","title":"Pengurangan dan Interseksi Data","text":"<p>Hal ini dilakukan untuk menyeleksi sekelompok data dari satu tabel lalu dikurangi dengan sekelompok data dari tabel lain.</p> <ul> <li>Contoh 1 : Menggunakan INNER JOIN</li> <li> <p>Masukkan data dulu ke tabel penerbit <pre><code>INSERT INTO penerbit\nVALUES ('PB09', 'MODULA');\n</code></pre></p> </li> <li> <p>Lihat data penerbit_id pada tabel penerbit <pre><code>SELECT\n    a.penerbit_id\nFROM\n    penerbit a;\n</code></pre></p> </li> <li> <p>Lihat data penerbit_id pada tabel buku ditambah klausa DISTINCT <pre><code>SELECT DISTINCT\n    b.penerbit_id\nFROM\n    buku b;\n</code></pre></p> </li> <li> <p>Lakukan interseksi data dengan query berikut <pre><code>SELECT DISTINCT\n    a.penerbit_id\nFROM\n    penerbit a\nINNER JOIN\n    buku b\nUSING\n    (penerbit_id);\n</code></pre> Hasil yang muncul merupakan irisan dari data query pertama dan query ke dua.</p> </li> <li> <p>Contoh 2 : Menggunakan MINUS / NOT IN</p> </li> <li> <p>Lihat data penerbit_id pada tabel penerbit <pre><code>SELECT\n    a.penerbit_id\nFROM\n    penerbit a;\n</code></pre></p> </li> <li> <p>Lihat data penerbit_id dari tabel buku, gunakan  klausa DISTINCT <pre><code>SELECT DISTINCT\n    b.penerbit_id\nFROM\n    buku b;\n</code></pre></p> </li> <li> <p>Lakukan pengurangan data query 1 dengan query 2 <pre><code>SELECT DISTINCT\n    a.penerbit_id\nFROM\n    penerbit a\nWHERE\n    (a.penerbit_id) NOT IN\n    (SELECT b.penerbit_id FROM buku b);\n</code></pre> Hasilnya adalah data penerbit_id pada tabel penerbit yang tidak ada pada data penerbit_id tabel buku.</p> </li> </ul>"},{"location":"bab5/#sub-query","title":"Sub-query","text":"<p>Subquery adalah perintah SELECT yang terdapat dalam perintah SELECT lain. Hal ini memudahkan kita untuk membuat berbagai format laporan semisal crosstab query.</p> <ul> <li>Contoh 1 Membuat query yang dapat menampilkan jumlah buku yang diterbitkan oleh masing-masing penerbit. kita akan menggunakan tabel buku dan tabel penerbit. <pre><code>SELECT\n    a.penerbit_id,\n    a.penerbit_nama,\n    (SELECT\n        COUNT(*)\n    FROM\n        buku\n    WHERE\n        penerbit_id = a.penerbit_id)\n    as 'Jumlah Buku'\nFROM\n    penerbit a;\n</code></pre> Pada contoh tersebut perintah SELECT bagian luar digunakan untuk menyeleksi data dari tabel penerbit, sedangkan bagian dalam digunakan untuk menyeleksi data dari tabel buku.</li> </ul> <p>Subquery juga biasa digunakan sebagai kolom penentu kondisi query (di bagian WHERE).</p> <ul> <li>Contoh 2 : Subquery sebagai penentu bagian WHERE <pre><code>SELECT\n    penerbit_id,\n    penerbit_nama\nFROM\n    penerbit\nWHERE\n    penerbit_id NOT IN\n    (SELECT\n        penerbit_id\n    FROM\n        buku);\n</code></pre> Perintah di atas digunakan untuk menampilkan data pada tabel 'penerbit' (kolom 'penerbit_id' dan 'penerbit_nama') yang datanya tidak terdapat pada tabel buku.</li> </ul>"},{"location":"bab6/","title":"Tabel Virtual","text":"<p>View adalah objek di dalam database yang berisi kumpulan kolom yang dihasilkan dari perintah <code>SELECT</code>. Sederhananya view adalah objek yang menyimpan hasil query, baik dari satu tabel atau lebih. View juga sering disebut sebagai tabel virtual, karena view sebenranya tidak memiliki data. Data yang ditampilkan oleh view diambil dari tabel-tabel aktual yang disertakan dalam perintah <code>SELECT</code>.</p>"},{"location":"bab6/#mengapa-perlu-menggunakan-tabel-virtual","title":"Mengapa Perlu Menggunakan Tabel Virtual?","text":"<p>Dalam pengelolaan database, view memiliki manfaat bagi kita, di antaranya:</p> <ol> <li>Akses data menjadi lebih mudah.<ul> <li>Dapat digunakan untuk menampilkan rangkuman dari suatu perhitungan tertentu.</li> <li>Dapat menampilkan beberapa kolom atau beberapa baris saja dari suatu tabel, tergantung dari kondisi yang didefinisikan.</li> <li>Dapat digunakan untuk menampilkan data yang berasal dari dua tabel atau lebih.</li> </ul> </li> <li>View dapat digunakan untuk menampilkan data yang berbeda untuk masing-masing user, sehingga setiap user hanya dapat melihat data yang sesuai dengan hak aksesnya.</li> </ol> <p>Pada kasus-kasus tertentu, data yang terdapat dalam satu view juga harus dapat dimodifikasi menggunakan perintah <code>INSERT</code>, <code>UPDATE</code> maupun <code>DELETE</code>. Jika data dalam suatu view diubah, sebenarnya yang berubah adalah data pada base table.</p>"},{"location":"bab6/#membuat-view","title":"Membuat View","text":"<p>Dalam MySQL, view dibuat menggunakan perintah <code>CREATE VIEW</code>. Berikut sintaks umum yang digunakan. <pre><code>CREATE VIEW [nama_view] AS [perintah SELECT];\n</code></pre> Sekarang kita buat view-nya. <pre><code>CREATE VIEW v_buku AS\nSELECT\n    a.buku_isbn,\n    a.buku_judul,\n    b.penerbit_nama,\n    a.buku_tglterbit,\n    a.buku_jmlhalaman,\n    a.buku_harga\nFROM\n    buku a,\n    penerbit b\nWHERE\n    a.penerbit_id = b.penerbit_id\nORDER BY\n    a.buku_judul;\n</code></pre> Perintah di atas akan mendefinisikan view di dalam database dengan nama v_buku. View tersebut berisi perintah <code>SELECT</code> yang melibatkan dua tabel, yaitu buku dan penerbit. Kolom relasi antara dua tabel tersebut adalah kolom penerbit_id.</p> <p>Sekarang kita bisa menampilkan data buku dengan <code>SELECT</code> view tersebut, berikut query-nya. <pre><code>SELECT * FROM v_buku;\n</code></pre></p>"},{"location":"bab6/#melihat-daftar-kolom-di-dalam-view","title":"Melihat Daftar Kolom di dalam view","text":"<p>Sama halnya seperti pada objek tabel, kita juga dapat melihat daftar kolom yang terdapat di dalam suatu view. Untuk melakukan hal ini kita bisa menjalankan query. Contoh: <pre><code>DESC v_buku;\n</code></pre></p>"},{"location":"bab6/#mengubah-view","title":"Mengubah View","text":"<p>Untuk mengubah definisi dari suatu view yang sebelumnya sudah dibuat, kita perlu menggunakan perintah <code>ALTER VIEW</code>. Perintah ini akan membuang atau menghapus definisi view yang lama dan menimpanya dengan definisi view yang baru. Format query-nya sebagai berikut. <pre><code>ALTER VIEW [nama_view] AS [perintah SELECT yang baru]\n</code></pre></p> <p>Sekarang perhatikan dan jalankan query berikut. <pre><code>ALTER VIEW v_buku AS\nSELECT\n    a.buku_isbn,\n    a.buku_judul,\n    b.penerbit_nama,\n    a.buku_harga\nFROM\n    buku a,\n    penerbit b\nWHERE\n    a.penerbit_id = b.penerbit_id\nORDER BY\n    a.buku_judul;\n</code></pre></p>"},{"location":"bab6/#menghapus-view","title":"Menghapus View","text":"<p>Kita dapat menghapus satua tau lebih view yang terdapat di dalam database dengan menggunakan perintah <code>DROP VIEW</code>. Format umum query-nya adalah sebagai berikut. <pre><code>DROP VIEW [IF EXISTS] [nama_view];\n</code></pre> <code>IF EXISTS</code> bersifat opsional dan berfungsi untuk mencegah terjadinya kesalahan pada saat perintah tersebut dieksekusi, yaitu dengan cara melakukan pemeriksaan terlebih dahulu, apakah view yang akan dihapus tersebut ada di dalam database atau tidak.</p> <p>Jika nama view yang disertakan dalam perintah <code>DROP VIEW</code> ternyata tidak ada, maka server MySQL akan mengeluarkan pesan peringatan/ warning. Kitadapat menampilkan isi peringatan tersebut dengan perintah <code>SHOW WARNINGS</code>.</p> <p>Perhatikan query berikut. <pre><code>DROP VIEW v1, v2;\n</code></pre> Query di atas akan menghapus dua view sekaligus. Sekarang jalankan query berikut untuk menghapus view <code>v_buku</code>.</p> <pre><code>DROP VIEW v_buku;\n</code></pre>"},{"location":"bab6/#membuat-view-yang-dapat-dimodifikasi","title":"Membuat View yang Dapat Dimodifikasi","text":"<p>Suatu view dapat dimodifikasi jika kolom-kolom dalam view tersebut mengacu langsung ke kolom yang terdapat pada base tabel, bukan hasil proses perhitungan. Sebagai contoh, coba perhatikan dan jalankan query berikut.</p> <p>Membuat view v_jmlBukuPerPenerbit <pre><code>CREATE VIEW v_jmlBukuPerPenerbit AS\nSELECT\n    b.penerbit_nama \"Nama Penerbit\",\n    COUNT(a.buku_judul) \"Jumlah Buku\"\nFROM\n    buku a,\n    penerbit b\nWHERE\n    a.penerbit_id = b.penerbit_id\nGROUP BY\n    b.penerbit_nama\nORDER BY\n    b.penerbit_nama;\n</code></pre> View tersebut berfungsi untuk menampilkan laporan jumlah buku per penerbit. Untuk melihat hasilnya jalankan query berikut. <pre><code>SELECT * FROM v_jmlBukuPerPenerbit;\n</code></pre> View di atas merupakan view yang tidak dapat dimodifikasi, karena data yang ditampilkan merupakan hasil proses perhitungan dari fungsi <code>COUNT()</code>.</p> <p>Sekarang kita coba membuat view yang bisa dimodifikasi. Perhatikan dan jalankan query berikut.</p> <p>Membuat view v_jmlHalaman <pre><code>CREATE VIEW v_jmlHalaman AS\nSELECT\n    buku_isbn,\n    buku_judul,\n    buku_jmlhalaman\nFROM\n    buku\nORDER BY\n    buku_isbn;\n</code></pre> Selanjutnya kita coba lihat data yang disajikan dari view di atas. <pre><code>SELECT * FROM v_jmlHalaman\nWHERE\n    buku_isbn = \"999-1555-2-1\";\n</code></pre> Perhatikan hasilnya, maka akan menampilkan 1 baris data. Sekarang kita coba lakukan modifikasi terhadap view tersebut dengan query berikut. <pre><code>UPDATE v_jmlHalaman\nSET\n    buku_halaman = buku_halaman + 10\nWHERE\n    buku_isbn = \"999-1555-2-1\";\n</code></pre> Setelah berhasil mengupdate view v_jmlHalaman, kita coba ulangi perintah berikut dan perhatikan hasilnya. <pre><code>SELECT * FROM v_jmlHalaman\nWHERE\n    buku_isbn = \"999-1555-2-1\";\n</code></pre></p> <p>Perhatikan nilai dari kolom buku_jmlhalaman. Nilai yang ditampilkan sekarang adalah 280, yang awalnya bernilai 270. Ini terjadi karena kita telah melakukan modifikasi terhadap view v_jmlHalaman menggunakan perintah <code>UPDATE</code>.</p> <p>Data yang sebenarnya diubah adalah data pada kolom tabel yang diakses, bukan data di dalam view yang bersangkutan. karena secara fisik view tidak pernah memiliki data. Karena inilah view sering disebut sebagai tabel virtual. Untuk membuktikan hal ini sekarang mari kita lihat datanya langsung dari tabel asli.</p> <p><pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    buku_jmlhalaman\nFROM\n    buku\nWHERE\n    buku_isbn = \"999-1555-2-1\";\n</code></pre> Hasil yang diperoleh akan sama seperti pada asat kita mengaksesnya melalui view v_jmlHalaman.</p>"},{"location":"bab6/#batasan-batasan-dalam-penggunaan-view","title":"Batasan-batasan dalam Penggunaan View","text":"<p>Pendefinisian view dapat menggunakan klausa-klausa yang terdapat pada perintah <code>SELECT</code>, seperti <code>WHERE</code>, <code>GROUP BY</code>, <code>ORDER BY</code> dan lain-lain. Namun demikian ada batasan-batasan yang perlu diperhatikan, yaitu:</p> <ol> <li>Kita tidak dapat membuat view temporari</li> <li>Kita tidak dapat mengasosiasikan trigger dengan view</li> <li>Tabel-tabel yang diakses oleh view harus ada di dalam database. Jika nama tabel diubah, maka view tidak dapat digunakan lagi, karena terjadi kesalahan pada saat dieksekusi</li> <li>Perintah <code>SELECT</code> yang didefinisikan di dalam view tidak boleh berisi kontruksi-kontruksi berikut:<ul> <li>Subquery di dalam klausa <code>FROM</code></li> <li>Mengacu ke tabel temporari</li> </ul> </li> </ol>"},{"location":"bab7/","title":"Manajemen User","text":""},{"location":"bab7/#membuat-user","title":"Membuat User","text":"<p>User adalah orang yang dapat menggunakan database. Sejauh mana user tersebut dapat bekerja di dalam database ditentukan dari hak akses yang dimilikinya: apakah sebagai Database Administrator yang memiliki hak akses penuh terhadap database yang diolah ataupun sekedar Operator yang memiliki hak akses terbatas sesuai jenis pekerjaannya.</p> <p>Format query untuk membuat user adalah sebagai berikut. <pre><code>CREATE USER [nama_user] IDENTIFIED BY [password];\n</code></pre></p> <p>Jalankan query  berikut untuk membuat user baru. <pre><code>CREATE USER 'admin' IDENTIFIED BY 's3cr3t';\n</code></pre> Query tersebut akan membuat user baru dengan nama admin dan password s3cr3t. Ingat, bahwa user tersebut baru kita buat dan belum memiliki hak akses apapun terhadap database, namun kita sudah bisa login ke server MySQL menggunakan user tersebut.</p> <p>Keluar dari user saat ini dengan perintah <code>\\q</code> lalu <code>ENTER</code>. Selanjutnya mari kita login <pre><code>mysql -u admin -p\n</code></pre> Tekan <code>ENTER</code> lalu masukkan password s3cr3t dan tekan <code>ENTER</code>. Setelah berhasil coba jalankan query berikut.</p> <p>Menampilkan database <pre><code>SHOW DATABASES;\n</code></pre></p> <p>Mengaktifkan/ menggunakan database buku_db <pre><code>USE buku_db;\n</code></pre> Apa hasilnya? \ud83d\ude02</p>"},{"location":"bab7/#mengenal-hak-akses","title":"Mengenal Hak Akses","text":"<p>Hak akses adalah suatu izin yang dapat diberikan kepada seorang user. Dengan izin tersebut, seorang user dapat melakukan aksi-aksi tertentu terhadap database.</p> <p>Hak akses tersebut dikelompokkan menjadi 2, yaitu:</p> <ol> <li>Tingkat User</li> <li>Tingkat Administrator</li> </ol> <p>Hak Akses Tingkat User</p> Hak Akses Keterangan CREATE Membuat database, tabel atau indeks CREATE TEMPORARY TABLE Membuat tabel temporari CREATE VIEW Membuat view DELETE Menghapus baris data EXECUTE Mengeksekusi prosedur INDEX Membuat indeks INSERT Memasukkan baris-baris data ke dalam tabel LOCK TABLES Mengunci suatu tabel SELECT Mengambil/ memilih data dari tabel SHOW DATABASES Menampilkan semua database SHOW VIEW Melihat daftar view yang dimiliki database UPDATE Mengubah data di dalam tabel USAGE Melakukan login, tapi tidak bisa melakukan apapun <p>Hak Akses Tingkat Administrator</p> Hak Akses Keterangan ALL Memiliki semua hak akses, kecuali WITH GRANT OPTION ALTER Mengubah struktur tabel CREATE USER Membuat user lain DROP Menghapus database, tabel atau view FILE Memuat data dari suatu file PROCESS Melihat daftar proses yang dieksekusi MySQL RELOAD Menggunakan perintah FLUSH SHUTDOWN Menghentikan server MySQL"},{"location":"bab7/#memberi-hak-akses","title":"Memberi Hak Akses","text":"<p>Perintah yagn digunakan untuk memberikan hak akses adalah <code>GRANT</code>, format umumnya sebgaimana berikut. <pre><code>GRANT [hak akses]\nON [nama_tabel]|*|*.*|[nama_database]\nTO [nama_user]\nIDENTIFIED BY [password];\n</code></pre> Jalankan query berikut untuk memberikan semua hak akses pada semua tabel yang terdapat dalam database bukudb kepada user admin.</p> <pre><code>GRANT ALL\nON bukudb.*\nTO 'admin'@'%'\nIDENTIFIED BY 's3cr3t';\n</code></pre> <p>Terkadang kita tidak perlu memberikan semua hak akses kepada user tertentu, untuk itu kita bisa menjalankan query berikut sebagai contohnya.</p> <pre><code>GRANT USAGE, INSERT, UPDATE, DELETE, SELECT\nON pengarang\nTO 'admin'@'%'\nIDENTIFIED BY 's3cr3t';\n</code></pre> <p>Dengan query tersebut, maka user admin hanya bisa memasukkan, mengubah, menghapus dan mengambil/ menampilkan data yang terdapat pada tabel pengarang saja.</p>"},{"location":"bab7/#mencabut-hak-akses","title":"Mencabut Hak Akses","text":"<p>Untuk mencabut/ menarik kembali hak akses dari user tertentu bisa menggunakan perintah <code>REVOKE</code> dengan format <pre><code>REVOKE [hak akses]\nON [nama_tabel]|*|*.*|[nama_database]\nFROM [nama user];\n</code></pre></p> <p>Contoh 1 <pre><code>REVOKE ALL\nON bukudb.*\nFROM admin\n</code></pre> Query tersebut akan mencabut semua hak akses admin terahdap database bukudb.</p> <p>Contoh 2 <pre><code>REVOKE USAGE, INSERT, UPDATE, DELETE, SELECT\nON pengarang\nFROM 'admin';\n</code></pre> Query tersebut akan mencabut hak akses <code>USAGE</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>SELECT</code> dari user admin terhadap tabel pengarang.</p>"},{"location":"bab7/#menghapus-user","title":"Menghapus User","text":"<p>Untuk menghapus user format query-nya adalah <pre><code>DROP USER [nama_user_1], [nama_user_2], ...dst;\n</code></pre></p> <p>Mari kita coba <pre><code>DROP USER 'admin'@'%';\n</code></pre></p>"},{"location":"bab7/#mengetahui-tabel-hak-akses","title":"Mengetahui Tabel Hak Akses","text":"<p>Ketika kita menjalankan query <code>GRANT</code> dan <code>REVOKE</code>, sebenarnya MySQL menyimpan data hak akses tersebut di dalam database <code>mysql</code>. Sehingga sebenarnya kita bisa saja melihat bahkan memberi ataupun menghapus hak akses user dengan memanipulasi database <code>mysql</code> tanpa melakukan query <code>GRANT</code> dan <code>REVOKE</code>.</p> <p>Jika kita ingin memodifikasi data secara langsung, kita harus menjalankan query</p> <p><pre><code>FLUSH PRIVILEGES\n</code></pre> Perintah tersebut berfungsi me-refresh perubahan yang telah dilakukan ke dalam database <code>mysql</code>.</p> <p>Berikut beberapa tabel dalam database <code>mysql</code> yang berkaitan dengan proses pemberian dan pencabutan hak akses user.</p> <ul> <li> <p>user</p> <p>Menyimpan informasi global tentang user dan hak akses yang dimilikinya.</p> </li> <li> <p>db</p> <p>Menyimpan informasi hak akases yang berkaitan dengan database untuk user tertentu.</p> </li> <li> <p>tables_priv</p> <p>Menyimpan informasi hak akses yang berkaitan dengan tabel untuk user tertentu.</p> </li> <li> <p>columns_priv</p> <p>Menyimpan informasi hak akses yang berkaitan dengan kolom untuk user tertentu.</p> </li> </ul> <p>Coba kita jalankan query berikut.</p> <p>Mengaktifkan database <code>mysql</code> dan menampilkan seluruh tabel di dalamnya. <pre><code>USE mysql;\nSHOW TABLES;\n</code></pre></p> <p>Menampilkan struktur tabel <code>user</code> <pre><code>DESC user;\n</code></pre></p> <p>Menampilkan beberapa kolom data dari tabel user. <pre><code>SELECT user, host\nFROM user;\n</code></pre></p>"},{"location":"bab8/","title":"Fungsi Agregasi","text":"<p>Fungsi Agregasi adalah fungsi di dalam MySQL yang digunakan untuk melakukan perhitungan pada query. Pada umumnya penggunaannya dikombinasikan dengan klausa <code>GROUP BY</code> untuk menghasilkan rangkuman nilai yang dikelompokkan berdasarkan nilai tertentu.</p> <p>Berikut ini beberapa fungsi yang termasuk dalam fungsi agregasi:</p> <ul> <li>Fungsi MIN()</li> <li>Fungsi MAX()</li> <li>Fungsi SUM()</li> <li>Fungsi COUNT()</li> <li>Fungsi AVG()</li> <li>Fungsi GROUP_CONCAT()</li> </ul>"},{"location":"bab8/#fungsi-min","title":"Fungsi MIN()","text":"<ul> <li><code>MIN()</code> berfungsi untuk mengembalikan nilai terkecil dari suatu kolom.</li> <li>Jika fungsi <code>MIN()</code> digunakan pada kolom bertipe numerik, maka akan mengembalikan angka terkecil, jika diterapkan pada kolom bertipe karakter, maka akan mengembalikan karakter dengan urutan alfabet paling awal. Berikut contohnya.</li> </ul> <p>Menampilkan jumlah halaman paling sedikit <pre><code>SELECT MIN(buku) FROM buku;\n</code></pre></p> <p>Menampilkan urutan abjad paling awal dari judul buku <pre><code>SELECT MIN(buku_judul) FROM buku;\n</code></pre></p>"},{"location":"bab8/#fungsi-max","title":"Fungsi MAX()","text":"<ul> <li><code>MAX()</code> merupakan kebalikan dari fungsi <code>MIN()</code>.</li> <li><code>MAX()</code> berfungsi mengembalikan nilai terbesar dari sebuah kolom.</li> <li><code>MAX()</code> bisa diterapkan pada kolom bertipe numerik maupun teks.</li> </ul> <p>Contoh, menampilkan halaman buku terbanyak. <pre><code>SELECT MAX(buku_jmlhalaman) FROM buku;\n</code></pre></p> <p>Menampilkan buku dengan abjad paling akhir. <pre><code>SELECT MAX(buku_judul) FROM buku;\n</code></pre></p>"},{"location":"bab8/#fungsi-sum","title":"Fungsi SUM()","text":"<p><code>SUM()</code> berguna untuk menjumlahkan nilai dari suatu kolom dalam tabel tertentu. Contoh: <pre><code>SELECT SUM(buku_jmlhalaman) FROM buku;\n</code></pre> Nilai yang tampil merupakan total dari semua jumlah halaman buku pada kolom <code>buku_jmlhalaman</code>.</p>"},{"location":"bab8/#fungsi-count","title":"Fungsi COUNT()","text":"<p>Berbeda dengan <code>SUM()</code>, fungsi <code>COUNT()</code> akan mengembalikan jumlah baris data pada kolom dari tabel tertentu.</p> <p>Contoh, menampilkan jumlah buku dari penerbit dengan <code>penerbit_id</code> = <code>PB06</code>. <pre><code>SELECT COUNT(*)\nFROM buku\nWHERE penerbit_id = 'PB06';\n</code></pre></p> <p>Untuk lebih membuktikan, coba kita cek dengan cara biasa. <pre><code>SELECT\n    buku_isbn,\n    buku_judul\nFROM\n    buku\nWHERE\n    penerbit_id = 'PB06';\n</code></pre></p>"},{"location":"bab8/#fungsi-avg","title":"Fungsi AVG()","text":"<p>Berfungsi untuk mendapatkan nilai rata-rata dari suatu kolom. Sebagai contoh, kita ibsa menghitung nilai rata-rata dari jumlah halaman buku dengan kode penerbit <code>PB06</code> dengan perintah berikut.</p> <pre><code>SELECT\n    AVG(buku_jmlhalaman)\nFROM\n    buku\nWHERE\n    penerbit_id = 'PB06';\n</code></pre> <p>Untuk lebih membuktikan, silahkan jalankan perintah berikut dan hitung rata-rata kolom <code>buku_jmlhalaman</code> secara manual. <pre><code>SELECT\n    buku_isbn,\n    buku_judul,\n    penerbit_id,\n    buku_jmlhalaman\nFROM\n    buku\nWHERE \n    penerbit_id = 'PB06';\n</code></pre></p>"},{"location":"bab8/#fungsi-group_concat","title":"Fungsi GROUP_CONCAT()","text":"<ul> <li><code>GROUP CONCAT</code> merupakan fungsi agregasi yang hanya disediakan oleh MySQL, dalam SQL standar tidak tersedia.</li> <li>Fungsinya adalah untuk menyambung beberapa baris data dari suatu kolom menjadi sebuah teks tunggal.</li> </ul> <p>Contoh, menampilkan data nama penerbit dari tabel penerbit. <pre><code>SELECT penerbit_nama\nFROM penerbit;\n</code></pre></p> <p>Selanjutnya kita ubah query nya sebagai berikut. <pre><code>SELECT GROUP_CONCAT(penerbit_nama)\nFROM penerbit;\n</code></pre></p> <p>Hasilnya, semua baris data akan digabungkan menjadi 1 baris.</p> <p>Dalam kasus yang lebih nyata, kita bisa mengelompokkan daftar buku sesuai nama penerbit. berikut query-nya. <pre><code>SELECT\n    b.penerbit_nama,\n    GROUP_CONCAT(a.buku_judul)\nFROM\n    buku a,\n    penerbit b\nWHERE\n    a.penerbit_id = b.penerbit_id\nGROUP BY\n    b.penerbit_nama\nORDER BY\n    b.penerbit_nama;\n</code></pre></p> <p>Fungsi <code>GROUP_CONCAT()</code> memiliki beberapa bentuk penggunaan, yaitu:</p> <ul> <li> <p>Dalam keadaan standar (default), pemisah yang digunakan adalah tanda koma (,). Kita dapat mengubah pemisah tersebut menggunakan karakter lain dengan menambahkan klausa <code>SEPARATOR</code>, contoh: <pre><code>SELECT\n    GROUP_CONCAT(penerbit_nama SEPARATOR ' - ')\nFROM\n    penerbit;\n</code></pre></p> </li> <li> <p>Kita dapat menggunakan <code>ORDER BY</code> untuk mengurutkan nilai yang akan digabung dalam teks tunggal, contoh: <pre><code>SELECT\n    GROUP_CONCAT(penerbit_nama ORDER BY penerbit_nama)\nFROM\n    penerbit;\n</code></pre></p> </li> <li> <p>Jika terdapat duplikasi nilai yang akan digabung ke dalam teks tunggal, maka nilai duplikat tersebut dapat dihilangkan menggunakan klausa <code>DISTINCT</code>, contoh: <pre><code>SELECT\n    GROUP_CONCAT(DISTINCT penerbit_nama)\nFROM\n    penerbit;\n</code></pre></p> </li> </ul>"},{"location":"bab8/#fungsi-agregasi-pada-nilai-null","title":"Fungsi Agregasi Pada Nilai NULL","text":"<p>Secara umum, fungsi-fungsi agregasi akan mengabaikan nilai <code>NULL</code>, kecuali <code>COUNT()</code>. Fungsi <code>COUNT()</code> memiliki sifat:</p> <ul> <li><code>COUNT()</code> tidak akan mengabaikan nilai <code>NULL</code></li> <li><code>COUNT([ekspresi])</code> dan <code>COUNT(DISTINCT)</code> akan mengabaikan nilai <code>NULL</code></li> </ul> <p>Untuk membuktikan hal tersebut, kita buat contoh tabel baru <code>tnull</code>. <pre><code>CREATE TABLE tnull(\n    a int\n);\n</code></pre></p> <p>Memasukkan data ke dalam tabel <code>tnull</code> <pre><code>INSERT INTO tnull VALUES\n(1),\n(NULL),\n(NULL),\n(NULL),\n(NULL);\n</code></pre></p> <p>Sekarang kita buktikan sifat pertama. <pre><code>SELECT COUNT(*) \nFROM tnull;\n</code></pre> Hasilnya adalah 5, karena nilai <code>NULL</code> tetap dihitung.</p> <p>Sekarang kita buktikan sifat kedua. <pre><code>-- Query-1\nSELECT COUNT(DISTINCT a)\nFROM tnull;\n\n-- Query-2\nSELECT COUNT(a)\nFROM tnull;\n</code></pre> Hasilnya adalah 1 karena nilai <code>NULL</code> tidak dihitung sebagai 1 baris data, dengan kata lain <code>NULL</code> diabaikan.</p> <p>Perintah <code>SELECT</code> mungkin saja menghasilkan baris kosong atau nilai <code>NULL</code> di setiap barisnya. Jika kita menggunakan fungsi agregasi pada kolom yang berisi baris kosong atau nilai <code>NULL</code> di setiap baris yang ada, maka:</p> <ul> <li>Untuk fungsi <code>COUNT()</code>, nilai yang dihasilkan adalah 0 (nol)</li> <li>Untuk fungsi <code>MIN()</code>, <code>MAX()</code>, <code>SUM()</code>, <code>AVG()</code> dan <code>GROUP_CONCAT()</code> akan menghasilkan nilai <code>NULL</code></li> </ul> <p>Sebagai bukti, coba kita hapus 1 baris data yang berisi nilai non-<code>NULL</code>. <pre><code>DELETE FROM tnull\nWHERE a=1;\n</code></pre> Lalu kita cek data yang tersisa <pre><code>SELECT * FROM tnull;\n</code></pre></p> <p>Selanjutnya kita coba eksekusi satu-persatu fungsi agregasi untuk mengetahui nilai yang dikembalikan.</p> <p><pre><code>SELECT COUNT(a) FROM tnull;\n</code></pre> Perintah di atas akan menghasilkan nilai 0 (nol), namun jika kita mencoba fungsi agregasi yang lain,</p> <p><pre><code>SELECT MIN(a) FROM tnull;\nSELECT MAX(a) FROM tnull;\nSELECT SUM(a) FROM tnull;\nSELECT AVG(a) FROM tnull;\nSELECT GROUP_CONCAT(a) FROM tnull;\n</code></pre> Semua perintah di atas akan menghasilkan nilai <code>NULL</code>.</p>"},{"location":"bab9/","title":"Operator dan Fungsi","text":""}]}